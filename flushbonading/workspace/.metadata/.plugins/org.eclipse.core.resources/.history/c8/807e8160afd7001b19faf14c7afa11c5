/*
 * Copyright (c) 2006-2021, RT-Thread Development Team
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Change Logs:
 * Date           Author       Notes
 * 2021-06-28     Daniel       the first version
 */
//#ifndef DRIVERS_DRV_DHT11_H_
//#define DRIVERS_DRV_DHT11_H_
//
//
//
//#endif /* DRIVERS_DRV_DHT11_H_ */

#ifndef rt_hw_us_delay
RT_WEAK void rt_hw_us_delay(rt_uint32_t us)
{
    rt_uint32_t delta;

    us = us * (SysTick->LOAD / (1000000 / RT_TICK_PER_SECOND));
    delta = SysTick->VAL;

    while (delta - SysTick->VAL < us) continue;
}
#endif

//复位DHT11
static void DHT11_Rst(rt_base_t pin)
{
    rt_pin_mode(pin,PIN_MODE_OUTPUT);   //SET OUTPUT
    rt_pin_write(pin, PIN_LOW);     //拉低DQ
    rt_thread_mdelay(20);       //拉低至少18ms

    rt_pin_write(pin, PIN_HIGH);        //DQ=1
    rt_hw_us_delay(30);     //主机拉高20~40us

}

//等待DHT11的回应
//返回1:未检测到DHT11的存在
//返回0:存在
static uint8_t DHT11_Check(rt_base_t pin)
{
    uint8_t retry = 0;
    rt_pin_mode(pin,PIN_MODE_INPUT);   //SET INPUT
    while (rt_pin_read(pin) && retry < 100)//DHT11会拉低40~80us
    {
            retry++;
            rt_hw_us_delay(1);
    };

    if(retry >= 100)
        return 1;
    else
        retry = CONNECT_FAILED;

    while (!rt_pin_read(pin) && retry < 100)//DHT11拉低后会再次拉高40~80us
    {
        retry++;
        rt_hw_us_delay(1);
    };

    if(retry >= 100)
        return CONNECT_FAILED;

    return CONNECT_SUCCESS;

}



//从DHT11读取一个位
//返回值：1/0
static uint8_t DHT11_Read_Bit(rt_base_t pin)
{
    uint8_t retry = 0;
    while (rt_pin_read(pin) && retry < 100)//等待变为低电平
    {
            retry++;
            rt_hw_us_delay(1);
    }
    retry=0;
    while (!rt_pin_read(pin) && retry < 100)//等待变高电平
    {
            retry++;
            rt_hw_us_delay(1);
    }
    rt_hw_us_delay(40);//等待40us
    if(rt_pin_read(pin)) return 1;
    else return 0;
}

//从DHT11读取一个字节
//返回值：读到的数据
static uint8_t DHT11_Read_Byte(rt_base_t pin)
{
    uint8_t i,dat;
   dat=0;
    for (i=0;i<8;i++)
    {
        dat<<=1;
        dat|=DHT11_Read_Bit(pin);
  }
  return dat;


}

//从DHT11读取一次数据
//temp:温度值(范围:0~50°)
//humi:湿度值(范围:20%~90%)
//返回值：0,正常;1,读取失败
static uint8_t DHT11_Read_Data(rt_base_t pin,uint8_t *temp,uint8_t *humi)
{
  uint8_t i, buf[5];
    DHT11_Rst(pin);

    if(DHT11_Check(pin) == 0)
    {
        for(i=0; i<5; i++) /* read 40 bits */
        {
            buf[i] = DHT11_Read_Byte(pin);
        }

        if((buf[0] + buf[1] + buf[2] + buf[3]) == buf[4])
        {
            *humi = buf[0];
            *temp = buf[2];
        }
    }
    else
    {
        return 1;
    }

    return 0;
}

//初始化DHT11的IO口 DQ 同时检测DHT11的存在
//返回1:不存在
//返回0:存在
static uint8_t DHT11_Init(rt_base_t pin)
{
//  DHT11_Rst(pin);  //复位DHT11
//  return DHT11_Check(pin);//等待DHT11的回应
    uint8_t ret = 0;

    DHT11_Rst(pin);

    ret = DHT11_Check(pin);
    if (ret != 0)
    {
            DHT11_Rst(pin);
            ret = DHT11_Check(pin);
    }

    return ret;
}


int32_t dht11_get_temperature(rt_base_t pin)
{
    static int32_t temOLD = 0;
    uint8_t humi=0, temp = 0;
    int32_t temNEW;

    DHT11_Read_Data(pin, &temp, &humi);

    temNEW = (humi << 16)|(temp<<0);

    if((temNEW != temOLD) && (temNEW !=0))
    {
        temOLD = temNEW;
    }
    return temOLD;
}
